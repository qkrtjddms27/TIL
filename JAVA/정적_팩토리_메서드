# 정적 팩토리 메서드
생성자외에 객체 생성의 역할을 하는 클래스 메서드
```java
public class LottoFacotry() {
    private static final int LOTTO_SIZE = 6;
    
    private static List<LottoNumber> allLottoNumbers = ...;
    
    public static Lotto createAutoLotto() {
        Collections.shuffle(allLottoNumbers);
        return new Lotto(allLottoNumbers.stream()
                .limit(LOTTO_SIZE)
                .collect(Collectors.toList()));
    }
    
    public static Lotto createManualLotoo(List<LottoNumber> lottoNumbers) {
        return new Lotto(lottoNumbers);
    }
}
```

## 정적 팩토리 메서드의 장점

### 이름을 가질 수 있다.
매개변수와 생성자 자체만으로 객체의 특성을 제대로 쉽게 묘사하기 힘들다. 반면에 정적 팩토리는 이름을 통해 객체의 특성을 묘사할 수 있다.

- 오버로딩을 이용하여 입력 매개변수의 순서를 바꾸는 방법이 있지만 좋지않음.
  + 생성자가 어떤 역할을 하는지 정확히 기억하기 어렵다.
  + 코드를 읽는 사람도 클래스 설명 문서를 찾아보지 않고는 의미를 알지 못한다.

### 호출될 때마다 인스턴스를 새로 생성하지는 않아도 된다.
- [불면 클래스](#불변-클래스)는 인스턴스를 미리 만들어 놓거나 새로 생성한 인스턴스를 캐싱하여 재활용하는 식으로 불필요한 객체 생성을 줄인다.
  + 같은 객체가 자주 호출되는 상황에서는 성능적으로 얻는 이점이 많다.

### 반환 타임의 하위 타입 객체를 반환할 수 있는 능력이 있다. (캡슐화)
- 반환할 객체의 클래스를 자유롭게 선택할 수 있는 유연성을 얻을 수 있다.
  + 구현 클래스를 공개하지 않고도 그 객체를 반환할 수 있다.
  + 컬렉션 프레임워크는 45개 클래스를 공개하지 않기 때문에 프로그래머가 사용하기 위해 알아야하는 API수가 적다.

### 입력 매개변수에 따라 매번 다른 클래스의 객체를 반환할 수 있다.
- 반환 타입의 하위 타입이기만 하면 어떤 클래스의 객체를 반화하든 상관없다.
- 클라이언트는 팩터리가 건네주는 객체가 어느 클래스의 인스턴스인지 알 수도 없고 알 필요도 없다.

### 정적 팩터리 메서드는 작성하는 시점에는 반환할 객체의 클래스가 존재하지 않아도 된다.
- 프레임워크를 만드는 근간이 됨.
- 자바 5부터는 java.util.ServiceLoader 범용 서비스 제공자 프레임워크가 제공되어 직접 만들 필요가 거의 없어짐.

## 정적 팩토리 메서드의 단점

### 정적 팩토리 메서드만 제공하면 하위 클래스를 만들 수 없다.
- 상속을 하려면 public 이나 protected 생성자가 필요.
  + 컬렉션 프레임워크의 유틸리티 구현 클래스들을 상속할 수 없다.
  + 해당 제약은 상속보다는 조립을 하도록 유도하는 부분에서는 오히려 장점이 될 수 있다.

### 정적 팩토리 메서드는 프로그래머가 찾기 어렵다.
- 생성자처럼 API 설명에 명확히 드러나지 않으니 사용자는 정적 팩토리 메서드 방식 클래스를 인스턴스화할 방법을 알아내야 한다.
  + 해당 방법은 메서드 이림을 널리 알려진 규약을 따라 짓는 식으로 최대한 문제를 완화해야된다.
    * from : 매개변수를 하나 받아서 해당 타입의 인스턴스를 반환하는 형변환 메서드
    * of : 여러 매개변수를 받아 적합한 타입의 인스턴스를 반환하는 집계 메서드
    * valueOf : from 과 of의 더 자세한 버전
    * instance 혹은 getInstance : 매개변수로 명시한 인스턴스를 반환하지만, 같은 인스턴스임을 보장하지 않는다.
    * create 혹은 getInstance : 매번 새로운 새로운 인스턴스를 생성해 반환함을 보장.
    * getType : getInstance 와 같으나, 생성할 클래스가 아닌 다른 클래스에 팩토리 메서드를 정의할 때 쓴다.
    * newType : newInstance 와 같으나, 생성할 클래스가 아닌 다른 클래스에 팩터리 메서드를 정의할 때 사용.
    * type : getType 과 newType 의 간결한 버전
#### 불변 클래스
- 정점은 멀티스레드 환경에서 동기화 처리없이 객체를 공유할 수 있는 장점이 있다.
- 단점으로는 객체가 가지는 값마다 새로운 객체가 필요하다. 따라서 메모리 누수와 새로운 객체를 계속 생성해야하기 때문에 성능저하 발생
- 예시로는 String 이 있다.
```java
public class ImmutableString {
    private final String name;
    
    ImmutableString(String name) {
        this.name = name;
    }
    
    @Override
    public String toString() {
        return this.name;
    }
} 
```
